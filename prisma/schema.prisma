// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//two types of people to use application
enum ROLE {
  USER
  ADMIN
}

// schema for the user and it has a relation with product that he created
model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  password      String?
  emailVerified Boolean    @default(false)
  image         String?
  token         String?    @unique
  role          ROLE       @default(USER)
  createdAT     DateTime   @default(now())
  Product       Product[]
  Favorite      Favorite[]
}

//schema model for a category and has relation with product
model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  createdAT DateTime  @default(now())
  Product   Product[]
}

// now creating model for product & many products to one category relation
model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  images      String[]
  views       Int         @default(1)
  categoryId  String?     @db.ObjectId
  category    Category?   @relation(fields: [categoryId], references: [id])
  userId      String?     @db.ObjectId
  User        User?       @relation(fields: [userId], references: [id])
  createdAT   DateTime    @default(now())
  OrderItem   OrderItem[]
  Favorite    Favorite[]
}

// creating model for Order
model Order {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  isPaid      Boolean      @default(false)
  addressInfo AddressInfo?
  OrderItem   OrderItem[]
  createdAT   DateTime     @default(now())
}

// // now creating model for model item and has relation with Order and Product
model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int      @default(1)
  orderId   String   @db.ObjectId
  Order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId()
  product   Product  @relation(fields: [productId], references: [id])
  createdAT DateTime @default(now())
}

// creating table for address information which has relation with Order
model AddressInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String
  city      String
  state     String
  country   String
  pincode   Int
  contactno Int
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  createdAT DateTime @default(now())

  @@unique([orderId])
}

// now creating model for favorite product which has a relation with product as well as User who liked it
model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId()
  product   Product  @relation(fields: [productId], references: [id])
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAT DateTime @default(now())
}
